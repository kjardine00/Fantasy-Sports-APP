import { League, LeagueMember } from "@/lib/types/database_types";
import { CreateLeagueData } from "@/lib/types/settings_types";
import { Result, success, failure } from "@/lib/types";
import { findAllByUserId, findByShortCode, create as createLeague, findById, existsByShortCode } from "@/lib/database/queries/league_queries";
import { create as createLeagueMember } from "@/lib/database/queries/leagues_members_queries";
import { generateShortCode } from "@/utils/short-code-gen";
import { InviteService } from "../invite/invite_service";

export class LeagueService {
  static async getAllLeaguesByUserId(userId: string): Promise<Result<League[]>> {
    const result = await findAllByUserId(userId);

    if (result.error) {
      return failure(result.error);
    }

    if (!result.data || result.data.length === 0) {
      return failure("No leagues found for this user");
    }

    return success(result.data);
  }

  static async getLeagueByShortCode(shortCode: string): Promise<Result<League>> {
    const result = await findByShortCode(shortCode);

    if (result.error) {
      return failure(result.error);
    }

    if (!result.data) {
      return failure("League not found");
    }

    return success(result.data);
  }

  static async createLeague(ownerId: string, data: CreateLeagueData): Promise<Result<League>> {

    // 1. Generate short code
    const shortCode = await this.generateUniqueShortCode();

    // 2. Validate settings
    const newLeague: League = {
      // id: is generated by the database
      name: data.name,
      owner_id: ownerId,
      draft_completed: false,
      short_code: shortCode,
      // created_at: is generated by the database
      // updated_at: is generated by the database
      is_public: false,
      settings: {
        numberOfTeams: data.numberOfTeams,
        useChemistry: data.useChemistry,
        numberOfDuplicatePicks: data.numOfDuplicatePlayers,
      }
    }

    // 3. Create league
    const createdLeague = await createLeague(newLeague);
    if (createdLeague.error || !createdLeague.data) {
      console.error("Failed to create league: ", createdLeague.error);
      return failure(createdLeague.error || "Failed to create league");
    }

    // 4. Create commissioner member
    const newLeagueMember: LeagueMember = {
      league_id: createdLeague.data.id!,
      user_id: ownerId,
      role: "commissioner",
      // draft_pick_order is generated by draft_service
      // created_at: is generated by the database
      league_number: 1,
      abbreviation: null,
      team_name: null,
      status: "Joined",
    }

    const createdMember = await createLeagueMember(newLeagueMember)
    if (createdMember.error || !createdMember.data) {
      console.error("Failed to create league member: ", createdMember.error);
      return failure(createdMember.error || "Failed to create league member");
    }

    // 5. Handle all errors and rollbacks
    //TODO: Handle if there is an error with creating the member the league should be rolled back

    // 6. Return result
    return success(createdLeague.data);
  }

  static async getLeague(leagueId: string): Promise<Result<League>> {
    const result = await findById(leagueId);
    if (result.error || !result.data) {
      return failure(result.error || "League not found");
    }
    return success(result.data);
  }

  private static async generateUniqueShortCode(): Promise<string> {
    const maxRetries = 10;

    for (let i = 0; i < maxRetries; i++) {
      const shortCode = generateShortCode(6);

      const exists = await existsByShortCode(shortCode)

      if (!exists) {
        return shortCode;
      }
    }

    throw new Error("Failed to generate unique short code");
  }
}
