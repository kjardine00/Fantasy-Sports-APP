import { createClient } from "@/lib/database/server";
import { League, LeagueMember } from "@/lib/types/database_types";
import {
  createLeague,
  getLeague,
  getUsersLeagues,
} from "@/lib/database/queries/leagues_queries";
import {
  setLeagueComissioner,
  getMemberRole,
  getAllLeaguesMembers,
  getLeagueByShortCode,
} from "@/lib/database/queries/leagues_members_queries";
import { generateShortCode } from "@/utils/short-code-gen";

export class LeagueService {
  static async getLeague(leagueId: string) {
    const { data, error } = await getLeague(leagueId);
    if (error) {
      return { error: error.message };
    }
    return { data: data, error: null };
  }

  static async getLeagues(userId: string) {
    const {data, error} = await getUsersLeagues(userId);

    if (error) {
      return { error: error.message };
    }

    if (!data || data.length === 0) {
      return { error: "No leagues found for this user" };
    }

    const leagues: League[] = data
      .map((item: any) => item.leagues)
      .filter((league: any): league is League => league != null)
      .map((league: any) => ({
        id: league.id,
        name: league.name,
        owner_id: league.owner_id,
        draft_completed: league.draft_completed,
        short_code: league.short_code,
        created_at: league.created_at,
        settings: league.settings
      }));

    return { data: leagues, error: null };
  }

  static async validateLeagueMembership(leagueId: string, userId: string) {
    const { data, error } = await getMemberRole(leagueId, userId);
    if (error) {
      return { error: error.message };
    }
    return { data: data, error: null };
  }

  static async getLeagueMembers(leagueId: string) {
    const { data, error } = await getAllLeaguesMembers(leagueId);
    if (error) {
      return { error: error.message };
    }
    return { data: data, error: null };
  }

  static async createLeague(formData: FormData) {
    const supabase = await createClient();
    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user) {
      return { error: "You must be logged in to create a league" };
    }

    const name = formData.get("name") as string;
    const numberOfTeams = formData.get("numberOfTeams") as string;
    const useChemistry = formData.get("useChemistry") as string;
    const duplicatePlayers = formData.get("duplicatePlayers") as string;

    const settings = {
      numberOfTeams,
      useChemistry,
      duplicatePlayers,
    };

    const shortCode = await this.generateUniqueShortCode();

    const newLeague: League = {
      // id: is generated by the database
      name,
      owner_id: user.id,
      draft_completed: false,
      short_code: shortCode,
      // created_at: is generated by the database
      settings,
    };

    const { data: league, error: leagueError } = await createLeague(newLeague);

    if (leagueError) {
      return { data: null, error: leagueError.message };
    }

    const newLeagueComissioner: LeagueMember = {
      league_id: league.id,
      user_id: user.id,
      role: "commissioner",
      draft_pick_order: null,
      league_number: null,
      abbreviation: null,
      team_name: null,
      status: null,
      // created_at: is generated by the database
    };

    const { error: memberError } =
      await setLeagueComissioner(newLeagueComissioner);

    if (memberError) {
      return { data: league, error: memberError.message };
    }

    return { data: league, error: null };
  }

  static async getLeagueByShortCode(shortCode: string) {
    const { data, error } = await getLeagueByShortCode(shortCode);
    if (error) {
      return { error: error.message };
    }
    return { data: data, error: null };
  }
  
  private static async generateUniqueShortCode(): Promise<string> {
    const maxRetries = 10;

    for (let i = 0; i < maxRetries; i++) {
      const shortCode = generateShortCode(6);

      // Check if short code already exists
      const { data: existingLeague } = await getLeagueByShortCode(shortCode);

      if (!existingLeague) {
        return shortCode; // Unique code found
      }
    }

    throw new Error("Failed to generate unique short code");
  }
}
