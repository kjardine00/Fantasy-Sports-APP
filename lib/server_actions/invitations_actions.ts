"use server";

import { redirect } from "next/navigation";
import { createClient } from "@/lib/database/server";
import { InvitationService } from "@/lib/services/invitation/invitation_service";
import { Invitation } from "@/lib/types/database_types";

export async function sendLeagueInvite(formData: FormData) {
  const supabase = await createClient();
  const {
    data: { user },
  } = await supabase.auth.getUser();

  if (!user) {
    return { error: "You must be logged in to send invitations" };
  }

  const email = formData.get("email") as string;
  const leagueId = formData.get("leagueId") as string;

  if (!email || !leagueId) {
    return { error: "Email and league ID are required" };
  }

  const invite: Invitation = {
    // id: is generated by the database
    league_id: leagueId,
    email,
    invited_by: user.id,
    // token: is generated by the database
    status: "pending",
    // expires_at: is generated by the database
    // created_at: is generated by the database
  };

  const { data, error } =
    await InvitationService.createAndSendInvitation(invite);

  if (error) {
    return { error: (error as string) || "An error occurred" };
  }

  return { success: true, data };
}

export async function createGenericInviteLink(
  leagueId: string,
  userId: string,
  maxUses: number,
) {
  const supabase = await createClient();

  const { data, error } = await InvitationService.createGenericInviteLink(
    leagueId,
    userId,
    maxUses,
  );

  if (error) {
    return {
      error: error.message || "An error occurred creating the invite link",
    };
  }

  return { success: true, data };
}

export async function getGenericInviteLink(leagueId: string) {
  const { data, error } =
    await InvitationService.getGenericInviteLink(leagueId);

  if (error) {
    return {
      error: error.message || "An error occurred retrieving the invite link",
    };
  }

  return { success: true, data };
}

export async function generateGenericInviteUrl(leagueId: string) {
  const { data, error } =
    await InvitationService.generateGenericInviteUrl(leagueId);

  if (error) {
    return { error: error || "An error occurred generating the invite URL" };
  }

  return { success: true, data };
}

export async function checkLeagueCapacity(leagueId: string, maxTeams?: number) {
  const { data, error } = await InvitationService.checkLeagueCapacity(
    leagueId,
    maxTeams || 12,
  );

  if (error) {
    return {
      error: error.message || "An error occurred checking league capacity",
    };
  }

  return { success: true, data };
}

export async function deactivateGenericLinksIfLeagueFull(leagueId: string) {
  const { data, error } =
    await InvitationService.deactivateGenericLinkIfLeagueFull(leagueId);

  if (error) {
    return {
      error: error.message || "An error occurred checking league capacity",
    };
  }

  return { success: true, data };
}

export async function validateInviteToken(token: string, userId?: string) {
  const { validationResult, shortCode, error } = await InvitationService.validateInviteToken(token, userId);

  if (error) {
    return { validationResult: 'error', shortCode: null, error: error.message || "An error occurred validating the invite token" };
  }

  return { validationResult, shortCode, error: null };
}

export async function handleInviteRedirect(token: string) {
  const supabase = await createClient();
  const {
    data: { user },
  } = await supabase.auth.getUser();

  if (!user) {
    redirect(`/login?invite=${token}`);
  }

  redirect(`/invite/${token}`);
}

export async function handleAcceptInvite(token: string, userId: string) {
  const { data, error } = await InvitationService.acceptInvitation(token, userId);

  if (error) {
    return { data: null, error: error.message || "An error occurred accepting the invite" };
  }

  if (data) {
    // Fetch the league to get the short code
    const { LeagueService } = await import("@/lib/services/league/leagues_service");
    const { data: league, error: leagueError } = await LeagueService.getLeague(data.league_id);
    
    if (leagueError || !league) {
      return { data: null, error: "Failed to fetch league information" };
    }
    
    redirect(`/league/${league.short_code}`);
  } else {
    return { data: null, error: "An error occurred accepting the invite" };
  }
}
