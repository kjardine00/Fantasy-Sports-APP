"use server";

import { createClient } from "@/lib/database/server";
import { League, LeagueMember } from "@/lib/types/database_types";
import { SettingsFormState } from "@/lib/types/settings_types";
import { insertLeague, updateLeagueAndSettings } from "@/lib/database/queries/leagues_queries";
import { setLeagueComissioner } from "@/lib/database/queries/leagues_members_queries";
import { createGenericInviteLink } from "@/lib/server_actions/invite_actions";
import { LeagueService } from "../services/league/leagues_service";
import { SettingsService } from "../services/league/settings_service";

export async function createLeagueAction(formData: FormData) {
  const supabase = await createClient();
  const {
    data: { user },
  } = await supabase.auth.getUser();
  if (!user) {
    console.log("User not logged in");
    return { error: "You must be logged in to create a league" };
  }

  const name = formData.get("name") as string;
  const numberOfTeams = formData.get("numberOfTeams") as string;
  const useChemistry = formData.get("useChemistry") as string;
  const numOfDuplicatePlayers = formData.get("numOfDuplicatePlayers") as string;

  const settings = {
    numberOfTeams: parseInt(numberOfTeams),
    useChemistry: useChemistry === "true",
    numOfDuplicatePlayers: parseInt(numOfDuplicatePlayers),
  };

  const shortCode = await LeagueService.generateUniqueShortCode();
   
  if (!shortCode) {
    console.log("Failed to generate unique short code");
    return { error: "Failed to generate unique short code" };
  }
  
  const newLeague: League = {
    // id: is generated by the database
    name,
    owner_id: user.id,
    draft_completed: false,
    short_code: shortCode,
    // created_at: is generated by the database
    settings,
  };

  const { data: league, error: leagueError } = await insertLeague(newLeague);

  if (leagueError) {
    console.log("Failed to insert league: ", newLeague);
    return { data: null, error: leagueError.message };
  }

  const newLeagueComissioner: LeagueMember = {
    league_id: league.id,
    user_id: user.id,
    role: "commissioner",
    draft_pick_order: null,
    league_number: null,
    abbreviation: null,
    team_name: null,
    status: "Joined",
    // created_at: is generated by the database
  };

  const { error: memberError } =
    await setLeagueComissioner(newLeagueComissioner);

  if (memberError) {
    console.log("Failed to set league commissioner: ", newLeagueComissioner);
    return { data: league, error: memberError.message };
  }

  const { error: inviteError } = await createGenericInviteLink(league.id, user.id, settings.numberOfTeams);

  if (inviteError) {
    console.log("Failed to create generic invite link: ", league.id, user.id, settings.numberOfTeams);
    return { data: league, error: typeof inviteError === 'string' ? inviteError : 'Failed to create invite link' };
  }

  console.log("=== LEAGUE CREATED SUCCESSFULLY ===");
  return { data: league, error: null };
}

export async function getLeagueSettingsAction(leagueId: string) {
  // getLeagueSettings
  const supabase = await createClient();
  const {
    data: { user },
  } = await supabase.auth.getUser();
  if (!user) {
    console.log("User not logged in");
    return { error: "User not logged in" };
  }

  const { data, error } = await SettingsService.fromDatabase(leagueId);
  
  if (error) {
    console.log("Failed to get league settings: ", leagueId);
    return { data: null, error: "Failed to get league settings"};
  }
  return { data: data, error: null };
}

export async function updateLeagueSettingsAction(leagueId: string, settings: SettingsFormState) {
  const supabase = await createClient();
  const {
    data: { user },
  } = await supabase.auth.getUser();
  if (!user) {
    console.log("User not logged in");
    return { error: "User not logged in" };
  }

  const { data: transformed, error: transformError } = await SettingsService.toDatabase(leagueId, settings);
  if (transformError || !transformed) {
    return { error: "Failed to transform settings" };
  }

  const { data, error: updateError } = await updateLeagueAndSettings(
    leagueId, 
    transformed.leagueFields, 
    transformed.settings
  );
  
  if (updateError) {
    return { error: "Failed to update" };
  }

  return { data, error: null };
}