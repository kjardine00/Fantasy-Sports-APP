"use server";

import { redirect } from "next/navigation";
import { createClient } from "@/lib/database/server";
import { League, LeagueMember } from "@/lib/types/database_types";
import { createLeague } from "@/lib/database/queries/leagues_queries";
import { setLeagueComissioner } from "@/lib/database/queries/leagues_members_queries";
import { generateShortCode } from "@/utils/short-code-gen";

export async function createLeagueAction(formData: FormData) {
  const supabase = await createClient();
  const {
    data: { user },
  } = await supabase.auth.getUser();
  if (!user) {
    return { error: "You must be logged in to create a league" };
  }

  const name = formData.get("name") as string;
  const numberOfTeams = formData.get("numberOfTeams") as string;
  const useChemistry = formData.get("useChemistry") as string;
  const duplicatePlayers = formData.get("duplicatePlayers") as string;

  const settings = {
    numberOfTeams,
    useChemistry,
    duplicatePlayers,
  };

  // Generate unique short code
  const maxRetries = 10;
  let shortCode = "";
  
  for (let i = 0; i < maxRetries; i++) {
    const generatedCode = generateShortCode(6);
    
    // Check if short code already exists
    const { data: existingLeague } = await supabase
      .from("leagues")
      .select("id")
      .eq("short_code", generatedCode)
      .single();
    
    if (!existingLeague) {
      shortCode = generatedCode;
      break;
    }
  }
  
  if (!shortCode) {
    return { error: "Failed to generate unique short code" };
  }

  const newLeague: League = {
    // id: is generated by the database
    name,
    owner_id: user.id,
    draft_completed: false,
    short_code: shortCode,
    // created_at: is generated by the database
    settings,
  };

  const { data: league, error: leagueError } = await createLeague(newLeague);

  if (leagueError) {
    return { data: null, error: leagueError.message };
  }

  const newLeagueComissioner: LeagueMember = {
    league_id: league.id,
    user_id: user.id,
    role: "commissioner",
    draft_pick_order: null,
    league_number: null,
    abbreviation: null,
    team_name: null,
    status: null,
    // created_at: is generated by the database
  };

  const { error: memberError } =
    await setLeagueComissioner(newLeagueComissioner);

  if (memberError) {
    return { data: league, error: memberError.message };
  }

  return { data: league, error: null };
}
