# Row Level Security (RLS) Policies for Fantasy Sports App
# ========================================================

# IMPORTANT: Run these policies AFTER enabling RLS on your tables
# Enable RLS first with: ALTER TABLE [table_name] ENABLE ROW LEVEL SECURITY;

# ========================================================
# 1. PROFILES TABLE POLICIES
# ========================================================

-- Users can view their own profile
CREATE POLICY "Users can view their own profile" ON profiles
  FOR SELECT USING (auth.uid() = auth_id);

-- Users can update their own profile
CREATE POLICY "Users can update their own profile" ON profiles
  FOR UPDATE USING (auth.uid() = auth_id);

-- Users can insert their own profile (for signup)
CREATE POLICY "Users can insert their own profile" ON profiles
  FOR INSERT WITH CHECK (auth.uid() = auth_id);

# ========================================================
# 2. LEAGUES TABLE POLICIES
# ========================================================

-- Users can view leagues they're members of
CREATE POLICY "Users can view leagues they're members of" ON leagues
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM leagues_members 
      WHERE league_id = leagues.id 
      AND user_id = auth.uid()
    )
  );

-- League owners can update their leagues
CREATE POLICY "League owners can update their leagues" ON leagues
  FOR UPDATE USING (auth.uid() = owner_id);

-- Authenticated users can create leagues
CREATE POLICY "Authenticated users can create leagues" ON leagues
  FOR INSERT WITH CHECK (auth.uid() = owner_id);

# ========================================================
# 3. LEAGUES_MEMBERS TABLE POLICIES
# ========================================================

-- Users can view members of leagues they're in
CREATE POLICY "Users can view league members" ON leagues_members
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM leagues_members lm2
      WHERE lm2.league_id = leagues_members.league_id 
      AND lm2.user_id = auth.uid()
    )
  );

-- League owners can add/remove members
CREATE POLICY "League owners can manage members" ON leagues_members
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM leagues 
      WHERE id = leagues_members.league_id 
      AND owner_id = auth.uid()
    )
  );

# ========================================================
# 4. MATCHUPS TABLE POLICIES
# ========================================================

-- Users can view matchups from leagues they're in
CREATE POLICY "Users can view league matchups" ON matchups
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM leagues_members 
      WHERE league_id = matchups.league_id 
      AND user_id = auth.uid()
    )
  );

-- League owners can create/update matchups
CREATE POLICY "League owners can manage matchups" ON matchups
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM leagues 
      WHERE id = matchups.league_id 
      AND owner_id = auth.uid()
    )
  );

# ========================================================
# 5. PLAYERS TABLE POLICIES
# ========================================================

-- All authenticated users can view players
CREATE POLICY "Authenticated users can view players" ON players
  FOR SELECT USING (auth.role() = 'authenticated');

-- Only admins can modify players
CREATE POLICY "Admins can modify players" ON players
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM profiles 
      WHERE auth_id = auth.uid() 
      AND role = 'admin'
    )
  );

# ========================================================
# 6. ROSTER_SLOTS TABLE POLICIES
# ========================================================

-- Users can view roster slots from leagues they're in
CREATE POLICY "Users can view league roster slots" ON roster_slots
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM leagues_members 
      WHERE league_id = roster_slots.league_id 
      AND user_id = auth.uid()
    )
  );

-- Users can manage their own roster slots
CREATE POLICY "Users can manage their own roster slots" ON roster_slots
  FOR ALL USING (auth.uid() = user_id);

# ========================================================
# 7. TRADES TABLE POLICIES
# ========================================================

-- Users can view trades they're involved in
CREATE POLICY "Users can view their trades" ON trades
  FOR SELECT USING (
    auth.uid() = from_user_id OR auth.uid() = to_user_id
  );

-- Users can create trades
CREATE POLICY "Users can create trades" ON trades
  FOR INSERT WITH CHECK (auth.uid() = from_user_id);

-- Users can update trades they're involved in
CREATE POLICY "Users can update their trades" ON trades
  FOR UPDATE USING (
    auth.uid() = from_user_id OR auth.uid() = to_user_id
  );

# ========================================================
# ADDITIONAL NOTES
# ========================================================

# 1. ENABLE RLS FIRST:
#    Run this before applying any policies:
#    ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
#    ALTER TABLE leagues ENABLE ROW LEVEL SECURITY;
#    ALTER TABLE leagues_members ENABLE ROW LEVEL SECURITY;
#    ALTER TABLE matchups ENABLE ROW LEVEL SECURITY;
#    ALTER TABLE players ENABLE ROW LEVEL SECURITY;
#    ALTER TABLE roster_slots ENABLE ROW LEVEL SECURITY;
#    ALTER TABLE trades ENABLE ROW LEVEL SECURITY;

# 2. TESTING:
#    - Test each policy after applying
#    - Check that your app still works
#    - Verify users can only see their own data

# 3. MODIFICATIONS:
#    - You can always modify or delete policies
#    - Use: DROP POLICY [policy_name] ON [table_name];
#    - Then recreate with: CREATE POLICY [new_policy]...

# 4. DEBUGGING:
#    - If policies are too restrictive, temporarily disable RLS
#    - Use: ALTER TABLE [table_name] DISABLE ROW LEVEL SECURITY;
#    - Re-enable after fixing: ALTER TABLE [table_name] ENABLE ROW LEVEL SECURITY;

# 5. COMMON ISSUES:
#    - Make sure auth.uid() returns the correct user ID
#    - Check that your app is properly authenticated
#    - Verify foreign key relationships are correct

# ========================================================
# END OF RLS POLICIES
# ========================================================
