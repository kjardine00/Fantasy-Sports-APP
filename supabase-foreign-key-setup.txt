# Supabase Foreign Key Setup Guide

## Issue
The join query between `leagues_members` and `profiles` tables is failing with:
"Could not find a relationship between 'leagues_members' and 'profiles' in the schema cache"

## Current Setup
- `leagues_members.user_id` should reference `profiles.auth_id`
- The foreign key relationship is not properly configured in Supabase

## Steps to Fix on Supabase End

### 1. Check Current Foreign Key Setup
Run this SQL query in Supabase SQL editor to see existing foreign keys:

```sql
SELECT 
    tc.constraint_name, 
    tc.table_name, 
    kcu.column_name, 
    ccu.table_name AS foreign_table_name,
    ccu.column_name AS foreign_column_name 
FROM 
    information_schema.table_constraints AS tc 
    JOIN information_schema.key_column_usage AS kcu
      ON tc.constraint_name = kcu.constraint_name
      AND tc.table_schema = kcu.table_schema
    JOIN information_schema.constraint_column_usage AS ccu
      ON ccu.constraint_name = tc.constraint_name
      AND ccu.table_schema = tc.table_schema
WHERE tc.constraint_type = 'FOREIGN KEY' 
    AND tc.table_name IN ('leagues_members', 'profiles');
```

### 2. Create the Foreign Key Relationship
If the foreign key doesn't exist, create it with:

```sql
ALTER TABLE leagues_members 
ADD CONSTRAINT leagues_members_user_id_fkey 
FOREIGN KEY (user_id) 
REFERENCES profiles(auth_id) 
ON DELETE CASCADE;
```

### 3. Alternative: Use profiles.id Instead
If you prefer to use `profiles.id` instead of `profiles.auth_id`:

```sql
ALTER TABLE leagues_members 
ADD CONSTRAINT leagues_members_user_id_fkey 
FOREIGN KEY (user_id) 
REFERENCES profiles(id) 
ON DELETE CASCADE;
```

### 4. Update Supabase Schema Cache
After creating the foreign key:
1. Go to Supabase dashboard
2. Navigate to Database â†’ Schema
3. Refresh the schema or wait a few minutes for it to update

### 5. Verify the Relationship
Check that the relationship exists:

```sql
SELECT 
    conname as constraint_name,
    conrelid::regclass as table_name,
    confrelid::regclass as referenced_table,
    a.attname as column_name,
    af.attname as referenced_column
FROM pg_constraint c
JOIN pg_attribute a ON a.attnum = ANY(c.conkey) AND a.attrelid = c.conrelid
JOIN pg_attribute af ON af.attnum = ANY(c.confkey) AND af.attrelid = c.confrelid
WHERE c.contype = 'f' 
    AND conrelid::regclass::text IN ('leagues_members', 'profiles');
```

## After Fix: Update Query
Once the foreign key is properly set up, you can use the simpler join syntax:

```typescript
export async function getAllLeaguesMembersAndUserInfo(league_id: string) {
  const supabase = await createClient();
  const { data, error } = await supabase
    .from("leagues_members")
    .select(`
      league_number,
      abbreviation,
      team_icon,
      team_name,
      status,
      user_id,
      profiles!inner(
        id,
        auth_id,
        username,
        role,
        profile_picture,
        created_at,
        updated_at
      )
    `)
    .eq("league_id", league_id);
  return { data, error };
}
```

## Current Workaround
Currently using a manual join approach in `lib/database/queries/leagues_members_queries.ts` that:
1. Gets league members first
2. Gets profiles separately using `.in("auth_id", userIds)`
3. Manually combines the data

This works but is less efficient than a proper database join.

## Files Modified
- `lib/database/queries/leagues_members_queries.ts` - Updated `getAllLeaguesMembersAndUserInfo` function
- `lib/services/league/members_service.ts` - Updated to handle nested profile data structure

## Next Steps
1. Set up the foreign key relationship in Supabase
2. Test the join query
3. Revert to the simpler join syntax if successful
4. Remove the manual join workaround
